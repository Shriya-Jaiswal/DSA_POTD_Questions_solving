#include<iostream>
#include<vector>
#include<queue>
using namespace std;

// // ‚ñ∂Ô∏è Ask by :  Google ‚úØ  

// // ‚ñ∂Ô∏è Approach-1 (simple using pointers)
// // ‚è≤Ô∏è Time Complexity : O(m+n)
// // üõ¢Ô∏è Space Complexity : O(m+n)

// bool areSentencesSimilar(string s1, string s2) {
//     if(s1.length() < s2.length()) {
//         swap(s1, s2);
//     }

//     vector<string> vec1, vec2;
//     stringstream ss1(s1);
//     string token;
//     while(ss1 >> token) {
//         vec1.push_back(token);
//     }

//     stringstream ss2(s2);
//     while(ss2 >> token) {
//         vec2.push_back(token);
//     }
//     int i = 0, j = vec1.size()-1; //s1 (vec1)
//     int k = 0, l = vec2.size()-1; //s2 (vec2)

//     while(k < vec2.size() && i < vec1.size() && vec2[k] == vec1[i]) {
//         k++;
//         i++;
//     }
//     while(l >= k && vec2[l] == vec1[j]) {
//         j--;
//         l--;
//     }
//     return l < k;
// }



// ‚ñ∂Ô∏è Approach-2 (simple deque)
// ‚è≤Ô∏è Time Complexity : O(m+n)
// üõ¢Ô∏è Space Complexity : O(m+n)

bool areSentencesSimilar(string s1, string s2) {
    if(s1.length() < s2.length()) {
        swap(s1, s2);
    }

    deque<string> deq1, deq2;
    stringstream ss1(s1);
    string token;
    while(ss1 >> token) {
        deq1.push_back(token);
    }

    stringstream ss2(s2);
    while(ss2 >> token) {
        deq2.push_back(token);
    }

    while(!deq1.empty() && !deq2.empty() && deq1.front() == deq2.front()) {
        deq1.pop_front();
        deq2.pop_front();
    }

    while(!deq1.empty() && !deq2.empty() && deq1.back() == deq2.back()) {
        deq1.pop_back();
        deq2.pop_back();
    }
        
    return deq2.empty();

}


int main()
{
    
    return 0;
}
